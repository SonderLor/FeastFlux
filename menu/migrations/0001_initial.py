# Generated by Django 5.2 on 2025-05-01 19:05

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("restaurants", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Allergen",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Название аллергена"
                    ),
                ),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "icon",
                    models.ImageField(
                        blank=True, null=True, upload_to="allergen_icons/", verbose_name="Иконка"
                    ),
                ),
                (
                    "severity_level",
                    models.PositiveSmallIntegerField(
                        default=2,
                        help_text="От 1 (низкий) до 3 (высокий)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(3),
                        ],
                        verbose_name="Уровень опасности",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
            ],
            options={
                "verbose_name": "Аллерген",
                "verbose_name_plural": "Аллергены",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название категории")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="menu_categories/",
                        verbose_name="Изображение",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(default=0, verbose_name="Порядок отображения"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активна")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subcategories",
                        to="menu.category",
                        verbose_name="Родительская категория",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="menu_categories",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория меню",
                "verbose_name_plural": "Категории меню",
                "ordering": ["order", "name"],
                "unique_together": {("name", "restaurant")},
            },
        ),
        migrations.CreateModel(
            name="Ingredient",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название ингредиента")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="ingredient_images/",
                        verbose_name="Изображение",
                    ),
                ),
                (
                    "calories_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=7,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Калории (на 100г)",
                    ),
                ),
                (
                    "protein_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Белки (на 100г)",
                    ),
                ),
                (
                    "fat_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Жиры (на 100г)",
                    ),
                ),
                (
                    "carbs_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Углеводы (на 100г)",
                    ),
                ),
                (
                    "fiber_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Клетчатка (на 100г)",
                    ),
                ),
                (
                    "sugar_per_100g",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                        verbose_name="Сахара (на 100г)",
                    ),
                ),
                (
                    "is_vegetarian",
                    models.BooleanField(default=False, verbose_name="Вегетарианский"),
                ),
                ("is_vegan", models.BooleanField(default=False, verbose_name="Веганский")),
                ("is_gluten_free", models.BooleanField(default=False, verbose_name="Без глютена")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "allergens",
                    models.ManyToManyField(
                        blank=True,
                        related_name="ingredients",
                        to="menu.allergen",
                        verbose_name="Аллергены",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_ingredients",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кто создал",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ингредиент",
                "verbose_name_plural": "Ингредиенты",
                "ordering": ["name"],
                "unique_together": {("name", "restaurant")},
            },
        ),
        migrations.CreateModel(
            name="MenuItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название блюда")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                        verbose_name="Цена",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("AVAILABLE", "Доступно"),
                            ("UNAVAILABLE", "Недоступно"),
                            ("SEASONAL", "Сезонное"),
                            ("COMING_SOON", "Скоро в меню"),
                        ],
                        default="AVAILABLE",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="menu_items/",
                        verbose_name="Основное изображение",
                    ),
                ),
                (
                    "additional_images",
                    models.JSONField(
                        blank=True,
                        help_text="JSON массив с URL изображений",
                        null=True,
                        verbose_name="Дополнительные изображения",
                    ),
                ),
                (
                    "is_signature",
                    models.BooleanField(default=False, verbose_name="Фирменное блюдо"),
                ),
                (
                    "is_vegetarian",
                    models.BooleanField(default=False, verbose_name="Вегетарианское"),
                ),
                ("is_vegan", models.BooleanField(default=False, verbose_name="Веганское")),
                ("is_gluten_free", models.BooleanField(default=False, verbose_name="Без глютена")),
                ("is_lactose_free", models.BooleanField(default=False, verbose_name="Без лактозы")),
                (
                    "spicy_level",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Не острое"),
                            (1, "Слабо острое"),
                            (2, "Средне острое"),
                            (3, "Острое"),
                            (4, "Очень острое"),
                        ],
                        default=0,
                        verbose_name="Уровень остроты",
                    ),
                ),
                (
                    "serving_size",
                    models.CharField(
                        blank=True, max_length=50, null=True, verbose_name="Размер порции"
                    ),
                ),
                (
                    "preparation_time",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Время приготовления (мин)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активно")),
                (
                    "order_in_category",
                    models.PositiveIntegerField(default=0, verbose_name="Порядок в категории"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="menu_items",
                        to="menu.category",
                        verbose_name="Категория",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_menu_items",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кто создал",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="menu_items",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Позиция меню",
                "verbose_name_plural": "Позиции меню",
                "ordering": ["category", "order_in_category", "name"],
            },
        ),
        migrations.CreateModel(
            name="MenuItemIngredient",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                (
                    "amount_grams",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.01"))],
                        verbose_name="Количество (грамм)",
                    ),
                ),
                (
                    "is_main",
                    models.BooleanField(
                        default=True,
                        help_text="Указывает, является ли ингредиент основным в блюде",
                        verbose_name="Основной ингредиент",
                    ),
                ),
                (
                    "is_visible",
                    models.BooleanField(
                        default=True,
                        help_text="Отображать ли ингредиент в описании блюда",
                        verbose_name="Отображать в меню",
                    ),
                ),
                (
                    "notes",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Примечания"
                    ),
                ),
                ("order", models.PositiveSmallIntegerField(default=0, verbose_name="Порядок")),
                (
                    "ingredient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="menu.ingredient",
                        verbose_name="Ингредиент",
                    ),
                ),
                (
                    "menu_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="menu.menuitem",
                        verbose_name="Позиция меню",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ингредиент в блюде",
                "verbose_name_plural": "Ингредиенты в блюдах",
                "ordering": ["menu_item", "order", "ingredient__name"],
                "unique_together": {("menu_item", "ingredient")},
            },
        ),
        migrations.AddField(
            model_name="menuitem",
            name="ingredients",
            field=models.ManyToManyField(
                related_name="menu_items",
                through="menu.MenuItemIngredient",
                to="menu.ingredient",
                verbose_name="Ингредиенты",
            ),
        ),
        migrations.CreateModel(
            name="Modifier",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название модификатора")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "modifier_type",
                    models.CharField(
                        choices=[
                            ("ADDITION", "Добавка"),
                            ("REMOVAL", "Убрать ингредиент"),
                            ("SUBSTITUTION", "Замена"),
                            ("PREPARATION", "Способ приготовления"),
                            ("SIZE", "Размер порции"),
                            ("OTHER", "Другое"),
                        ],
                        default="OTHER",
                        max_length=20,
                        verbose_name="Тип модификатора",
                    ),
                ),
                (
                    "price_change",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Положительное значение для надбавки, отрицательное для скидки",
                        max_digits=10,
                        verbose_name="Изменение цены",
                    ),
                ),
                (
                    "nutrition_impact",
                    models.JSONField(
                        blank=True,
                        help_text='JSON с изменениями КБЖУ, например: {"calories": 50, "protein": 5}',
                        null=True,
                        verbose_name="Влияние на пищевую ценность",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активен")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "applicable_items",
                    models.ManyToManyField(
                        blank=True,
                        related_name="available_modifiers",
                        to="menu.menuitem",
                        verbose_name="Применимо к блюдам",
                    ),
                ),
                (
                    "related_ingredient",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modifiers",
                        to="menu.ingredient",
                        verbose_name="Связанный ингредиент",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modifiers",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Модификатор",
                "verbose_name_plural": "Модификаторы",
                "ordering": ["restaurant", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="menuitem",
            index=models.Index(
                fields=["restaurant", "category", "is_active"],
                name="menu_menuit_restaur_49cff6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="menuitem",
            index=models.Index(
                fields=["is_vegetarian", "is_vegan", "is_gluten_free"],
                name="menu_menuit_is_vege_f53802_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="menuitem",
            unique_together={("name", "restaurant", "category")},
        ),
        migrations.AlterUniqueTogether(
            name="modifier",
            unique_together={("name", "restaurant")},
        ),
    ]
