# Generated by Django 5.2 on 2025-05-01 18:43

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Restaurant",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название ресторана")),
                ("address", models.CharField(max_length=255, verbose_name="Адрес")),
                ("city", models.CharField(max_length=100, verbose_name="Город")),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Почтовый индекс"
                    ),
                ),
                (
                    "country",
                    models.CharField(default="Россия", max_length=100, verbose_name="Страна"),
                ),
                ("phone", models.CharField(max_length=20, verbose_name="Телефон")),
                ("email", models.EmailField(max_length=254, verbose_name="Email")),
                ("website", models.URLField(blank=True, null=True, verbose_name="Веб-сайт")),
                ("description", models.TextField(blank=True, null=True, verbose_name="Описание")),
                (
                    "opening_hours",
                    models.JSONField(
                        default=dict,
                        help_text='Формат: {"monday": {"open": "09:00", "close": "22:00"}, ...}',
                        verbose_name="Часы работы",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True, null=True, upload_to="restaurant_logos/", verbose_name="Логотип"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активен")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "managers",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={"role": "MANAGER"},
                        related_name="managed_restaurants",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Менеджеры",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ресторан",
                "verbose_name_plural": "Рестораны",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Table",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("number", models.PositiveIntegerField(verbose_name="Номер столика")),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        default=4,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Вместимость",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("FREE", "Свободен"),
                            ("OCCUPIED", "Занят"),
                            ("RESERVED", "Зарезервирован"),
                            ("UNAVAILABLE", "Недоступен"),
                        ],
                        default="FREE",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "shape",
                    models.CharField(
                        choices=[
                            ("ROUND", "Круглый"),
                            ("SQUARE", "Квадратный"),
                            ("RECTANGULAR", "Прямоугольный"),
                            ("OVAL", "Овальный"),
                            ("CUSTOM", "Нестандартный"),
                        ],
                        default="SQUARE",
                        max_length=20,
                        verbose_name="Форма",
                    ),
                ),
                (
                    "width",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Ширина (см)"
                    ),
                ),
                (
                    "length",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Длина (см)"
                    ),
                ),
                (
                    "min_spend",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Минимальный чек",
                    ),
                ),
                (
                    "location_description",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Описание расположения"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Активен")),
                ("position_x", models.FloatField(default=0, verbose_name="Позиция X на карте")),
                ("position_y", models.FloatField(default=0, verbose_name="Позиция Y на карте")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tables",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
            ],
            options={
                "verbose_name": "Столик",
                "verbose_name_plural": "Столики",
                "ordering": ["restaurant", "number"],
                "unique_together": {("restaurant", "number")},
            },
        ),
        migrations.CreateModel(
            name="Reservation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Уникальный идентификатор",
                    ),
                ),
                ("customer_name", models.CharField(max_length=100, verbose_name="Имя клиента")),
                ("customer_email", models.EmailField(max_length=254, verbose_name="Email клиента")),
                ("customer_phone", models.CharField(max_length=20, verbose_name="Телефон клиента")),
                (
                    "number_of_guests",
                    models.PositiveSmallIntegerField(
                        default=2,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Количество гостей",
                    ),
                ),
                ("reservation_date", models.DateField(verbose_name="Дата бронирования")),
                ("reservation_time", models.TimeField(verbose_name="Время бронирования")),
                ("end_time", models.TimeField(verbose_name="Время окончания")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Ожидает подтверждения"),
                            ("CONFIRMED", "Подтверждено"),
                            ("CANCELLED", "Отменено"),
                            ("COMPLETED", "Завершено"),
                            ("NO_SHOW", "Не пришли"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "special_requests",
                    models.TextField(blank=True, null=True, verbose_name="Особые пожелания"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Дата создания"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Дата обновления")),
                (
                    "dietary_preferences",
                    models.JSONField(
                        blank=True,
                        help_text="Например: вегетарианство, веганство, безглютеновая диета",
                        null=True,
                        verbose_name="Диетические предпочтения",
                    ),
                ),
                (
                    "allergy_information",
                    models.JSONField(
                        blank=True,
                        help_text="Список аллергенов для компании гостей",
                        null=True,
                        verbose_name="Информация об аллергии",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_reservations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Кто создал",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reservations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Пользователь",
                    ),
                ),
                (
                    "restaurant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="restaurants.restaurant",
                        verbose_name="Ресторан",
                    ),
                ),
                (
                    "table",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reservations",
                        to="restaurants.table",
                        verbose_name="Столик",
                    ),
                ),
            ],
            options={
                "verbose_name": "Бронирование",
                "verbose_name_plural": "Бронирования",
                "ordering": ["-reservation_date", "reservation_time"],
                "indexes": [
                    models.Index(
                        fields=["reservation_date", "status"], name="restaurants_reserva_b1b2bb_idx"
                    ),
                    models.Index(fields=["customer_phone"], name="restaurants_custome_9cc709_idx"),
                ],
            },
        ),
    ]
